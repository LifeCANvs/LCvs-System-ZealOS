#include "MIDIHandling"
#include "WaveformGen"

U0 AudioPlayNote(U8 note, U8 velocity, U8 instrument) {

	// ultimately, we should use AC97OutputMix to be multi channel

    //U32 buffer[SAMPLE_RATE];

	U32 *buffer;
	I64 bufferSize;

	if (instrument == SAMPLE)
	{
		bufferSize = 132300;
	 	buffer = MAlloc(bufferSize * sizeof(U32));
	}
	else
	{
		bufferSize = SAMPLE_RATE;
		buffer = MAlloc(bufferSize * sizeof(U32));
	}

    F64 freq = MidiToFreq(note);

    switch(instrument) {
        case PULSE1:
            GeneratePulse1Wave(buffer, SAMPLE_RATE, freq, velocity);
            break;
        case PULSE2:
            GeneratePulse2Wave(buffer, SAMPLE_RATE, freq, velocity);
            break;
        case TRIANGLE:
            GenerateTriangleWave(buffer, SAMPLE_RATE, freq, velocity);
            break;
        case NOISE:
            GenerateNoiseWave(buffer, SAMPLE_RATE, freq, velocity);
            break;
        case SAMPLE:
            PlaySample(buffer, 132300, velocity);
            break;
        default:
            GenerateSineWave(buffer, SAMPLE_RATE, freq, velocity);
            break;
    }

    //ApplyEnvelope(buffer, SAMPLE_RATE); // TODO: Apply fade in and fade out

    // Play the buffer using the AC97 driver:
    AudioSFXPlay(buffer, SAMPLE_RATE);
	U8 *instrument_name = "DEFAULT";
	if (instrument == SAMPLE) instrument_name = "SAMPLE";
	if (instrument == PULSE1) instrument_name = "PULSE1";
	if (instrument == PULSE2) instrument_name = "PULSE2";
	if (instrument == TRIANGLE) instrument_name = "TRIANGLE";
	if (instrument == NOISE) instrument_name = "NOISE";
	"Instrument: $$LTGREEN$$ %s $$DKGRAY$$|$$FG$$ Note: $$YELLOW$$%d$$FG$$\n", instrument_name, note;

	Free(buffer);
}

U0 PlayPattern(Pattern *pattern) {
    I64 row;
    NoteCell *cell;
    for (row = 0; row < TRACK_LENGTH; row++) {
        cell = &pattern->cells[row];
        if (cell->note) {
            AudioPlayNote(cell->note, cell->velocity, cell->instrument);
        }
		//if (cell->instrument == SAMPLE) Sleep(2000);
        Sleep(1000);  // Adjust for tempo
    }
}

U0 EnterPattern(Pattern *pattern) {
    I64 row;
    NoteCell *cell;
    for (row = 0; row < TRACK_LENGTH; row++) {
        cell = &pattern->cells[row];
        Print("Enter note for row %d (0-127, 0 for none): ", row);
        // cell->note = InU8;
        // if (cell->note) {
        //     Print("Enter velocity for note (1-127): ");
        //     cell->velocity = InU8;
        // }
    }
}

U0 MusicTracker() {

	LoadSample("~/Tracker/Samples/OrchHit.WAV");

    Song song;


	song.patterns[0].cells[0].note = 60;  // C3
	song.patterns[0].cells[0].velocity = 100;
	song.patterns[0].cells[0].instrument = SAMPLE;

	song.patterns[0].cells[1].note = 60;  // C3
	song.patterns[0].cells[1].velocity = 100;
	song.patterns[0].cells[1].instrument = PULSE1;

	song.patterns[0].cells[2].note = 62;  // D
	song.patterns[0].cells[2].velocity = 100;
	song.patterns[0].cells[2].instrument = PULSE1;

	song.patterns[0].cells[3].note = 64;  // E
	song.patterns[0].cells[3].velocity = 100;
	song.patterns[0].cells[3].instrument = PULSE1;

	song.patterns[0].cells[4].note = 60;  // C
	song.patterns[0].cells[4].velocity = 100;
	song.patterns[0].cells[4].instrument = PULSE2;

	song.patterns[0].cells[5].note = 62;  // D
	song.patterns[0].cells[5].velocity = 100;
	song.patterns[0].cells[5].instrument = PULSE2;

	song.patterns[0].cells[6].note = 60;  // C
	song.patterns[0].cells[6].velocity = 100;
	song.patterns[0].cells[6].instrument = TRIANGLE;

	song.patterns[0].cells[7].note = 62;  // D
	song.patterns[0].cells[7].velocity = 100;
	song.patterns[0].cells[7].instrument = TRIANGLE;

	song.patterns[0].cells[8].note = 64;  // E
	song.patterns[0].cells[8].velocity = 100;
	song.patterns[0].cells[8].instrument = TRIANGLE;

	song.patterns[0].cells[9].note = 102;  
	song.patterns[0].cells[9].velocity = 100;
	song.patterns[0].cells[9].instrument = NOISE;



    // Clear(&song);
    I64 sc;
    while (1) {
        Print("\nMusic Tracker:\n");
        Print("1. Enter Pattern\n");
        Print("2. Play Pattern\n");
        Print("3. Exit\n");
        Print("Choice: ");

        switch (KeyGet(&sc)) {
            case '1':
				"1\n";
                EnterPattern(&song.patterns[0]);  // Only one pattern for simplicity
                break;
            case '2':
				"2\n";
                PlayPattern(&song.patterns[0]);
                break;
            case '3':
				"3\n";
                return;
            default:
                Print("Invalid choice.\n");
        }
    }
	CleanupWaveformGen(); // Free the sample buffer
}
