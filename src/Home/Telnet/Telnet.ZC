// Telnet client for ZealOS by y4my4m
// Public Domain

#define TELNET_PORT 23
#define BUF_SIZE 40960 // way too big?
#define TIMEOUT_DURATION 5000

#define NEGOTIATE 0xFF
#define IAC 0xFF
#define WILL 0xFB
#define WONT 0xFC
#define DO 0xFD
#define DONT 0xFE
#define ECHO 0x01
#define SUPPRESS_GO_AHEAD 0x03
#define TERMINAL_TYPE 0x18
#define LINEMODE 0x22
#define NAWS 0x1F
#define IS 0x00
#define SE 0xF0

#define ANSI_ESC 0x1B
#define ANSI_CSI 0x5B // [

CTask *input_task	= NULL;
Bool force_disconnect = FALSE;
Bool input_request = FALSE;

U8 IsDigit(U8 ch) {
  return '0' <= ch <= '9';
}

Bool CursorInWin(CTask *task, I64 x, I64 y)
{
	if (	0 <= x + task->scroll_x < task->pix_width &&
			0 <= y + task->scroll_y < task->pix_height)
		return TRUE;
	else
		return FALSE;
}

U0 AppendColorString(I64 color_code) {
  U8 *color;
  switch (color_code) {
    case 0: color = "$$BLACK$$"; break;
    case 1: color = "$$RED$$"; break;
    case 2: color = "$$GREEN$$"; break;
    case 3: color = "$$YELLOW$$"; break;
    case 4: color = "$$BLUE$$"; break;
    case 5: color = "$$PURPLE$$"; break;
    case 6: color = "$$CYAN$$"; break;
    case 7: color = "$$WHITE$$"; break;
    case 8: color = "$$FG$$"; break;
    default: color = ""; break;
  }
  "%s", color;
}

U0 SendWindowSize(I64 sock, U16 rows, U16 cols) {
  U8 buf[9];

  buf[0] = 0xFF; // IAC
  buf[1] = 0xFA; // SB
  buf[2] = 0x1F; // NAWS (Negotiate About Window Size)
  buf[3] = cols >> 8; // High byte of columns
  buf[4] = cols & 0xFF; // Low byte of columns
  buf[5] = rows >> 8; // High byte of rows
  buf[6] = rows & 0xFF; // Low byte of rows
  buf[7] = 0xFF; // IAC
  buf[8] = 0xF0; // SE

  TCPSocketSendString(sock, buf);
}

U0 SendTerminalType(I64 sock, U8 *terminal_type) {
  U8 response[256];
  I64 len = StrLen(terminal_type);

  response[0] = 0xFF; // IAC
  response[1] = 0xFA; // SB
  response[2] = 0x18; // TERMINAL TYPE
  response[3] = 0x00; // IS
  MemCopy(response + 4, terminal_type, len);

  response[len + 4] = 0xFF; // IAC
  response[len + 5] = 0xF0; // SE
  response[len + 6] = '\0';
  TCPSocketSendString(sock, response);
}

U0 HandleControlCodes(U8 ch) {
  if (ch < 32 && ch != 20) { // ASCII code below 32 (control character)
    switch (ch) {
      case 0: // NUL (Null) - Typically ignored
        break;
      case 7: // BEL (Bell)
        // Beep;
        break;
      case 8: // BS (Backspace)
        "%c%c%c", 8, ' ', 8; // Move cursor back, erase character, move cursor back again
        break;
      case 9: // HT (Horizontal Tab)
        "        "; // 8 spaces
        break;
      case 10: // LF (Line Feed)
        "\n";
        break;
      case 11: // VT (Vertical Tab)
        break;
      case 12: // FF (Form Feed)
        DocClear;
        break;
      case 13: // CR (Carriage Return)
        "\r";
        break;
      case 14: // SO (Shift Out) - Switch to an alternate character set
      case 15: // SI (Shift In)  - Switch back to the default character set
      default:
        break;
    }
  } 
  else {
    if (ch == 0x24) {
      // ch = "//$$$$";
    }
    "%c", ch;
  }
}

I64 TelnetOpen(U8 *host, U16 port) {
  I64 sock;

  if (host == NULL) {
    return -1;
  }

  sock = TCPConnectionCreate(host, port);
  "$$RED$$Conecting to %s:%d.$$FG$$$$BG$$\n", host, port;
  if (sock <= 0) {
    PrintErr("Failed to connect to %s:%d\n", host, port);
    return sock;
  }

	// sock(CTCPSocket *)->timeout = TCP_TIMEOUT;
  
  return sock;
}

U0 InputTask(U0 *args) {
  I64 sock = *args;

	DocTermNew;
	DocPrint(, "$$WW,1$$");
  // DocCursor;

  U8 input_buffer[BUF_SIZE];
  U8 *temp, ch;
  U8 *line = input_buffer;
  I64 input_len = 0;

  while (!force_disconnect) {
    if (!input_request) {

      DocBottom(input_task->put_doc);
      "\n$$RED$$$BK,1$Input$BK,0$$$BLACK$$:";

      // https://theasciicode.com.ar/ascii-control-characters/escape-ascii-code-27.html
      input_len = 0;
      while (1) {
        ch = CharGet(, FALSE);
        if (ch == '\r' || ch == '\n') {
          // input_buffer[input_len++] = '\r';
          // input_buffer[input_len++] = '\n';
          break;
        }
        else if (ch == CH_SHIFT_ESC) {
          force_disconnect = TRUE;
          break;
        }
        else if (ch == CH_ESC) {
          TCPSocketSendString(sock, 0x27);
          break;
        }
        // else if (ch == CH_BACKSPACE) {
        //   TCPSocketSendString(sock, 0x08);
        //   break;
        // }
        else if (ch == 0x0F) { // TAB?
          TCPSocketSendString(sock, 0x09);
          break;
        }
        else {
          input_buffer[input_len++] = ch;
          // "%c", ch;
          // DocBottom(input_task->put_doc);
          DocPrint(input_task->put_doc, "%c", ch);
        }
      }
      // input_buffer[input_len++] = '\0';
      
      if (!force_disconnect) {
        SysLog(input_buffer);
        temp = MStrPrint("%s\r\n", input_buffer);

        TCPSocketSendString(sock, temp);
        Free(temp);
        MemSet(input_buffer, 0, BUF_SIZE);
        DocClear;
        
      } else {
        "Force disconnecting...\n";
        break;
      }
    }
  }
}

U0 Telnet(U8 *host, U16 port=TELNET_PORT) {
  
  I64 sock, bytes_received, input_len, sc;
  U8 buffer[BUF_SIZE], *ptr;

  I64 window_width = 80;
  I64 window_height = 25;

  I64 window_left = (GR_WIDTH - window_width) / 2;
  I64 window_top = (Fs->win_bottom - Fs->win_top - window_height) / 2;

  WinHorz(Fs->win_left, Fs->win_left+window_width, Fs);
  WinVert(Fs->win_top + window_top, Fs->win_top + window_top + window_height, Fs);
  // DocCursor(OFF);

  // WinToTop(Fs);
  // WinFocus(Fs);

  sock = TelnetOpen(host, port);
  if (sock <= 0) {
    return;
  }

	input_task = Spawn(&InputTask, &sock, "Telnet Input");
	input_task->win_inhibit = WIG_USER_TASK_DEFAULT;
	LBts(&input_task->display_flags, DISPLAYf_SHOW);
	WinFocus(input_task);

  input_task->win_top = Fs->win_top + window_top;
	input_task->win_bottom = Fs->win_top + 40;
	input_task->win_left	= Fs->win_left;
	input_task->win_right	= Fs->win_left+window_width;

  DocClear;

  "$$BG,RED$$$$WHITE$$Connected$$FG$$$$BG$$\n";

  while (!force_disconnect) {
    bytes_received = TCPSocketReceive(sock, buffer, BUF_SIZE - 1);
    if (bytes_received > 0) {
      buffer[bytes_received] = '\0';

      // Basic Telnet protocol parser
      ptr = buffer;
      while (*ptr) {
         // Telnet negotiation sequence
        if (*ptr == NEGOTIATE) {
          U8 negotiation_code = *(ptr + 1);
          U8 option_code = *(ptr + 2);

          // Send a response to the server
          U8 response[4];
          response[0] = IAC;

          if (negotiation_code == DO || negotiation_code == DONT) {
            if (option_code == ECHO) {
              if (negotiation_code == DO) {
                response[1] = WILL;
              } else {
                response[1] = WONT;
              }
            } else if (option_code == SUPPRESS_GO_AHEAD) { 
              if (negotiation_code == DO) {
                response[1] = WILL;
              } else {
                response[1] = WONT;
              }
            } else if (option_code == TERMINAL_TYPE) {
              if (negotiation_code == DO) {
                response[1] = WILL;
                response[2] = option_code;
                response[3] = '\0';
                TCPSocketSendString(sock, response);
                SendTerminalType(sock, "ANSI-BBS");
                SendWindowSize(sock, 25, 80);
              } else {
                response[1] = WONT;
              }
            } else if (option_code == LINEMODE) { 
              if (negotiation_code == DO) {
                response[1] = WILL;
                // Do we need LINEMODE?
              } else {
                response[1] = WONT;
              }
            } else {
              response[1] = WONT;
            }
          } else {
            response[1] = DONT;
          }

          response[2] = option_code;
          response[3] = '\0';
          TCPSocketSendString(sock, response);
          ptr += 3;
        } 
        else if (*ptr == ANSI_ESC) {
          // ANSI escape sequence
          ptr++;
          if (*ptr == ANSI_CSI) {
            ptr++;
            I64 ansi_code;
            while (1) {
              ansi_code = 0;
              while (IsDigit(*ptr)) {
                ansi_code = ansi_code * 10 + (*ptr - '0');
                ptr++;
              }
              // Process ansi_code
              if (*ptr == ' ') {
                // skip empty space
                ptr++;
              }
              else if (*ptr == ';') {
                ptr++;
              }
              else {
                // this helps for ANSI detection
                if (*ptr == 'n') {
                  if (ansi_code == 5) {
                    // Respond with terminal readiness
                    SysLog("reported terminal readiness\n");
                    TCPSocketSendString(sock, "\x1B[0n");
                  }
                  else if (ansi_code == 6) {
                    // Respond with cursor position
                    // U8 response[32] = "\x1B[%d;%dR", window_width, window_height;
                    SysLog("reported cursor position\n");
                    TCPSocketSendString(sock, "\x1B\[25;80R");
                  } 
                  ptr++;
                } else if (*ptr == 'c') {
                  // Respond with device attributes
                  SysLog("reported device attributes\n");
                  TCPSocketSendString(sock, "\x1B[?1;0c");
                  ptr++;
                } else if (*ptr == 'm') {
                  I64 color_code;
                  if (ansi_code >= 30 && ansi_code <= 37) {
                    color_code = ansi_code - 30; // Set foreground color
                  } else if (ansi_code >= 40 && ansi_code <= 47) {
                    color_code = ansi_code - 40; // Set background color
                  } else {
                    switch (ansi_code) {
                      case 0: "$$BG$$$$FG$$"; break; // reset
                      // case 1: ""; break; // TODO: bold
                      // case 2: ""; break; // TODO: dim
                      // case 3: ""; break; // TODO: italic
                      // case 4: "$$UL,1$$" + string + "$$UL,0$$"; break; // TODO: underline
                      // case 5: "$$"; break; // TODO: blink
                      // case 6: ""; break; // TODO: fast blink
                      // case 7: "$$IV,1$$" + string + "$$IV,0$$"; break; // TODO: invert
                      // case 8: ""; break; // TODO: hide (rare)
                      // case 9: ""; break; // TODO: strikethrough
                      // case 10: ""; break; // TODO: primary font
                    }
                  }
                  switch (color_code) {
                    case 0: "$$BLACK$$"; break;
                    case 1: "$$RED$$"; break;
                    case 2: "$$GREEN$$"; break;
                    case 3: "$$YELLOW$$"; break;
                    case 4: "$$BLUE$$"; break;
                    case 5: "$$BROWN$$"; break;
                    case 6: "$$CYAN$$"; break;
                    case 7: "$$WHITE$$"; break;
                    default: break;
                  }
                  ptr++;
                  break;
                } else if (*ptr == 'A') {
                  CursorInWin(Fs, 0, -1);  // Cursor Up
                  ptr++;
                } else if (*ptr == 'B') {
                  CursorInWin(Fs, 0, 1);  // Cursor Down
                  ptr++;
                } else if (*ptr == 'C') {
                  // Cursor Right
                  I64 i;
                  I64 move_count = 0;
                  while (IsDigit(*ptr)) {
                    move_count = move_count * 10 + (*ptr - '0');
                    ptr++;
                  }
                  if (move_count == 0) {
                    move_count = 1; // Default value if no number is provided
                  }

                  // for (i = 0; i < move_count; i++) {
                    // Print(" ");
                  // }
                  CursorInWin(Fs, move_count, 0);  // Cursor Right
                  ptr++;
                } else if (*ptr == 'D') {
                  CursorInWin(Fs, -1, 0);  // Cursor Left
                  ptr++;
                } else if (*ptr == 'E') {
                  "\n";
                  ptr++;
                } else if (*ptr == 'H' || *ptr == 'f') {
                  // TODO: Cursor Position
                  // CursorInWin(Fs, arg1, arg2);  
                  ptr++;
                } else if (*ptr == 'J') {
                  // Erase in Display
                  DocClear;
                  ptr++;
                } else if (*ptr == 'K') {
                  // TODO: Erase in Line
                  ptr++;
                } else if (*ptr == 'S') {
                  // TODO: Scroll Up
                  ptr++;
                } else if (*ptr == 'T') {
                  // TODO: Scroll Down
                  ptr++;
                } else if (*ptr == '?') {
                  ptr++;
                  I64 code = 0;

                  while (IsDigit(*ptr)) {
                    code = code * 10 + (*ptr - '0');
                    ptr++;
                  }

                  switch (code) {
                    case 25:
                      if (*ptr == 'l') SysLog("code 25l\n");// Hide cursor
                      if (*ptr == 'h') SysLog("code 25h\n");// Show cursor
                      ptr++; // Move past 'l' or 'h'
                      break;
                    case 1049:
                      if (*ptr == 'l') SysLog("code 1049l\n"); // Save screen and switch to alternate screen buffer
                      if (*ptr == 'h') SysLog("code 1049h\n"); // Restore screen and switch back to main screen buffer
                      ptr++; // Move past 'l' or 'h'
                      break;
                    default:
                      break;
                  }
                } else if (*ptr == 's') {
                  // self.saveCursorPosition();
                  ptr++;
                } else if (*ptr == 'r') {
                  // self.restoreCursorPosition();
                  ptr++;
                } else if (*ptr == 'h' || *ptr == 'l') {
                  // TODO: Handle 'h' (set mode) or 'l' (reset mode) codes
                  ptr++; // Skip 'h' or 'l'
                } else {
                  ptr++;
                }
                break;
              }
            }
          }
        }
        else if (*ptr == '|') {
          // U8 code[3];
          // code[0] = ptr++;
          // code[1] = ptr++;
          // code[2] = '\0';
          // I64 color_code = ToI64(code);
          // AppendColorString(color_code);
          SysLog("Pipe code: %c%c\n", ptr[1], ptr[2]);
          ptr += 3; // Skip the pipe code characters
          // ptr++;
        }
        else {
          // Print the received character
          HandleControlCodes(*ptr);
          ptr++;
        }
      }
      
    } else {
      // SysLog("Error: %0x%02X\n", ch);
      "Error: Connection closed by the remote host.\n";
      break;
    }
  }

	// sock(CTCPSocket *)->timeout = 0;
  while (TaskValidate(input_task))
  {
    Refresh;
  }

	// sock(CTCPSocket *)->timeout = TCP_TIMEOUT;
  TCPSocketClose(sock);
  "Telnet connection closed.\n";
}


class CHostForm {
  U8 host[256] format "$$DA-P,LEN=255,A=\"Host:%s\"$$";
  U16 port format "A=\"Port:%d\"";
};

U0 TelnetPrompt() {
  CHostForm form;

  form.host[0] = 0;
  form.port = TELNET_PORT;
  if (PopUpForm(&form)) {
    Telnet(form.host, form.port);
  }
}

// Telnet("mbrserver.com");
// Telnet("freechess.org");
// Telnet("dura-bbs.net", 6359);
// Telnet("darkrealms.ca");

// good to test refresh, line feed, etc
// Telnet("20forbeers.com", 1337);

// view public IP
// Telnet("telnetmyip.com")

// time
// Telnet("india.colorado.edu", 13);

// telehack
// Telnet("telehack.com");

// star trek game
// Telnet("mtrek.com", 1701);
// Telnet("xmltrek.com", 1701);

// Telnet("bbs.archaicbinary.net"); // Archaic Binary
// Telnet("ateraan.com", 4002); //  New Worlds - Ateraan
// Telnet("avalon-rpg.com"); // Avalon: The Legend Lives
// Telnet("aardmud.org", 4000); // Aardwolf MUD
// Telnet("TextMMOde.com"); // Sands of Time / Deep Space MMO
// Telnet("legendofthereddragon.ca"); // Legend of the Red Dragon (Canada)
// Telnet("lord.stabs.org"); // Legend of the Red Dragon
// Telnet("thehatshop.mudhosting.net", 3000); // Hallowed Halls
// Telnet("batmud.bat.org"); // BatMUD
// Telnet("forgottenkingdoms.org", 4000); // Forgotten Kingdoms
// Telnet("igormud.org", 1701);// Igor MUD
// Telnet("achaea.com"); // Achaea, Dreams of Divine Lands
// Telnet("gcomm.com"); // Galacticomm BBS
// Telnet("1984.ws"); // 1984

// Telnet("telnet.holdfastbbs.ca", 2323);

// ZealBBS dev server
Telnet("localhost", 8888);